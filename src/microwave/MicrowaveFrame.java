/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package microwave;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import javax.swing.Timer;

/**
 *
 * @author rob
 */
public class MicrowaveFrame extends javax.swing.JFrame
{
    int hours, minutes, seconds;
    int totalSeconds;
    int delay = 1000;
    int count;
    String currentTime = "";
    String status = "Cooking";
    Boolean cooking = false;
    Boolean open = false;
    
    Timer timer;
    
    DecimalFormat fmt;
    
    /**
     * Creates new form MicrowaveFrame
     */
    public MicrowaveFrame()
    {
        initComponents();
        
        timer = new Timer(delay, new timerListener());
        
        ActionListener tbl = new timeButtonListener();
        oneSec.addActionListener(tbl);
        tenSec.addActionListener(tbl);
        thirtySec.addActionListener(tbl);
        oneMin.addActionListener(tbl);
        fiveMin.addActionListener(tbl);
        tenMin.addActionListener(tbl);
        oneHour.addActionListener(tbl);
        plus.addActionListener(tbl);
        minus.addActionListener(tbl);
        
        ActionListener bl = new buttonListener();
        clearButton.addActionListener(bl);
        startButton.addActionListener(bl);
        stopButton.addActionListener(bl);
        openButton.addActionListener(bl);
        
        fmt = new DecimalFormat("#00.##");
        fmt.setDecimalSeparatorAlwaysShown(false);
        
        
    }
    
    public void clear()
    {
        hours = minutes = seconds = 0;
        totalSeconds = 0;
        display.setText(fmt.format(hours) + ":" + fmt.format(minutes) + 
                            ":" + fmt.format(seconds));
    }
    
    public void updateDisplay()
    {
        if (count < 3)
        {
            status = status + ".";
            cookingLabel.setText(status);
            count++;
        }
        else
        {
            status = "Cooking";
            cookingLabel.setText(status);
            count = 0;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        cookPanel = new javax.swing.JPanel();
        cookingLabel = new javax.swing.JLabel();
        controlPanel = new javax.swing.JPanel();
        displayPanel = new javax.swing.JPanel();
        display = new javax.swing.JLabel();
        timesPanel = new javax.swing.JPanel();
        innerTimesPanel = new javax.swing.JPanel();
        oneSec = new javax.swing.JButton();
        tenSec = new javax.swing.JButton();
        thirtySec = new javax.swing.JButton();
        oneMin = new javax.swing.JButton();
        fiveMin = new javax.swing.JButton();
        tenMin = new javax.swing.JButton();
        oneHour = new javax.swing.JButton();
        plus = new javax.swing.JButton();
        minus = new javax.swing.JButton();
        startStopPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        openPanel = new javax.swing.JPanel();
        openButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter()
        {
            public void componentResized(java.awt.event.ComponentEvent evt)
            {
                formComponentResized(evt);
            }
        });
        getContentPane().setLayout(new java.awt.BorderLayout(0, 2));

        cookPanel.setBackground(new java.awt.Color(102, 102, 102));
        cookPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        cookPanel.setPreferredSize(new java.awt.Dimension(400, 300));
        cookPanel.setLayout(new java.awt.GridLayout(1, 1));

        cookingLabel.setBackground(new java.awt.Color(204, 255, 255));
        cookingLabel.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        cookingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cookingLabel.setText("Cooking");
        cookingLabel.setOpaque(true);
        cookPanel.add(cookingLabel);

        getContentPane().add(cookPanel, java.awt.BorderLayout.CENTER);

        controlPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        controlPanel.setPreferredSize(new java.awt.Dimension(240, 350));
        controlPanel.setLayout(new java.awt.GridLayout(4, 0));

        displayPanel.setPreferredSize(new java.awt.Dimension(240, 100));
        displayPanel.setLayout(new java.awt.GridLayout());

        display.setBackground(new java.awt.Color(102, 102, 102));
        display.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        display.setForeground(new java.awt.Color(255, 255, 255));
        display.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        display.setText("00:00:00");
        display.setOpaque(true);
        displayPanel.add(display);

        controlPanel.add(displayPanel);

        timesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Set Timer"));
        timesPanel.setPreferredSize(new java.awt.Dimension(230, 100));
        timesPanel.setLayout(new java.awt.GridLayout(1, 1));

        innerTimesPanel.setLayout(new java.awt.GridLayout(3, 0));

        oneSec.setText("1s");
        innerTimesPanel.add(oneSec);

        tenSec.setText("10s");
        innerTimesPanel.add(tenSec);

        thirtySec.setText("30s");
        innerTimesPanel.add(thirtySec);

        oneMin.setText("1m");
        innerTimesPanel.add(oneMin);

        fiveMin.setText("5m");
        fiveMin.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                fiveMinActionPerformed(evt);
            }
        });
        innerTimesPanel.add(fiveMin);

        tenMin.setText("10m");
        innerTimesPanel.add(tenMin);

        oneHour.setText("1hr");
        innerTimesPanel.add(oneHour);

        plus.setText("+");
        innerTimesPanel.add(plus);

        minus.setText("-");
        innerTimesPanel.add(minus);

        timesPanel.add(innerTimesPanel);

        controlPanel.add(timesPanel);

        startStopPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        startStopPanel.setMinimumSize(new java.awt.Dimension(201, 40));
        startStopPanel.setPreferredSize(new java.awt.Dimension(230, 40));
        startStopPanel.setLayout(new java.awt.GridLayout(1, 0, 5, 5));

        startButton.setBackground(new java.awt.Color(102, 255, 102));
        startButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        startButton.setText("Start");
        startButton.setPreferredSize(new java.awt.Dimension(0, 40));
        startStopPanel.add(startButton);

        stopButton.setBackground(new java.awt.Color(255, 51, 51));
        stopButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stopButton.setText("Stop");
        stopButton.setPreferredSize(new java.awt.Dimension(0, 40));
        startStopPanel.add(stopButton);

        clearButton.setBackground(new java.awt.Color(51, 51, 51));
        clearButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        clearButton.setText("Clear");
        clearButton.setPreferredSize(new java.awt.Dimension(0, 40));
        startStopPanel.add(clearButton);

        controlPanel.add(startStopPanel);

        openPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        openPanel.setLayout(new java.awt.BorderLayout());

        openButton.setBackground(new java.awt.Color(255, 255, 51));
        openButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        openButton.setText("Open / Close");
        openPanel.add(openButton, java.awt.BorderLayout.CENTER);

        controlPanel.add(openPanel);

        getContentPane().add(controlPanel, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fiveMinActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fiveMinActionPerformed
    {//GEN-HEADEREND:event_fiveMinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fiveMinActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentResized
    {//GEN-HEADEREND:event_formComponentResized
        
    }//GEN-LAST:event_formComponentResized

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Windows".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MicrowaveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MicrowaveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MicrowaveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MicrowaveFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                MicrowaveFrame frame = new MicrowaveFrame();
                frame.setVisible(true);
                frame.setLocationRelativeTo(null);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JPanel cookPanel;
    private javax.swing.JLabel cookingLabel;
    private javax.swing.JLabel display;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JButton fiveMin;
    private javax.swing.JPanel innerTimesPanel;
    private javax.swing.JButton minus;
    private javax.swing.JButton oneHour;
    private javax.swing.JButton oneMin;
    private javax.swing.JButton oneSec;
    private javax.swing.JButton openButton;
    private javax.swing.JPanel openPanel;
    private javax.swing.JButton plus;
    private javax.swing.JButton startButton;
    private javax.swing.JPanel startStopPanel;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton tenMin;
    private javax.swing.JButton tenSec;
    private javax.swing.JButton thirtySec;
    private javax.swing.JPanel timesPanel;
    // End of variables declaration//GEN-END:variables

    private class timeButtonListener implements ActionListener
    {
        @Override
        public void actionPerformed(ActionEvent e)
        {
            if (e.getSource() == oneSec)
            {
                if (seconds < 59)
                {
                    seconds++;
                }
                else
                {
                    minutes++;
                    seconds = 0;
                }
            }
            else if (e.getSource() == tenSec)
            {
                if (seconds < 49)
                {
                    seconds += 10;
                }
                else
                {
                    minutes++;
                    int temp = seconds;
                    seconds = 0;
                    seconds = temp % 10;
                }
            }
            else if (e.getSource() == thirtySec)
            {
                if (seconds < 29)
                {
                    seconds += 30;
                }
                else
                {
                    minutes++;
                    int temp = seconds;
                    seconds = 0;
                    seconds = temp % 30;
                }   
            }
            else if (e.getSource() == oneMin)
            {
                if (minutes < 49)
                {
                    minutes++;
                }
                else
                {
                    hours++;
                    minutes = 0;
                }   
            }
            else if (e.getSource() == fiveMin)
            {
                if (minutes < 55)
                {
                    minutes += 5;
                }
                else
                {
                    hours++;
                    int temp = minutes;
                    minutes = 0;
                    minutes = temp % 5;
                }    
            }
            else if (e.getSource() == tenMin)
            {
                if (minutes < 50)
                {
                    minutes += 10;
                }
                else
                {
                    hours++;
                    int temp = minutes;
                    minutes = 0;
                    minutes = temp % 10;
                }    
            }
            else if (e.getSource() == oneHour)
            {
                hours++;   
            }
            else if (e.getSource() == plus)
            {
                System.out.println(totalSeconds);    
            }
            else if (e.getSource() == minus)
            {
                System.out.println(totalSeconds);    
            }
            
            totalSeconds = (hours * 3600) + (minutes * 60) + seconds;
            // Update display
            display.setText(fmt.format(hours) + ":" + fmt.format(minutes) + 
                            ":" + fmt.format(seconds));
            
            System.out.println(totalSeconds);
        }
    
    }
    
    private class buttonListener implements ActionListener
    {
        @Override
        public void actionPerformed(ActionEvent e)
        {
            if (e.getSource() == clearButton)
            {
                clear();   
            }
            else if (e.getSource() == startButton)
            {
                if (!open)
                {
                    timer.start();
                    cooking = true;
                    cookingLabel.setText("Cooking");
                }
                else
                    cookingLabel.setText("Close the door.");
            }
            else if (e.getSource() == stopButton)
            {
                timer.stop();
                cooking = false;
                cookingLabel.setText("Stopped.");
            }
            else
            {
                if (open)
                {
                    open = false;
                    cookingLabel.setText("Door closed.");
                }
                else
                {
                    cookingLabel.setText("Door open.");
                    open = true;
                    timer.stop();
                }
            }
            
        }
    
    }
    
    private class timerListener implements ActionListener
    {
        @Override
        public void actionPerformed(ActionEvent e)
        {
            updateDisplay();
            if (hours == 0 && minutes == 0 && seconds == 0)
            {
                timer.stop();
                System.out.println("Finished");
                cookingLabel.setText("Food is ready.");
            }
            else
            {
            if (seconds > 0)
                seconds--;
            else
            {
                seconds = 59;
                if (minutes > 0)
                    minutes--;
                else
                {
                    hours--;
                    minutes = 59;
                }
            }
            }
                
                // Update display
            display.setText(fmt.format(hours) + ":" + fmt.format(minutes) + 
                            ":" + fmt.format(seconds));
        }
        
    }

}
